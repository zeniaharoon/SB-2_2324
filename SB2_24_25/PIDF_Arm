//package org.firstinspires.ftc.teamcode;
//
//import com.acmerobotics.dashboard.FtcDashboard;
//import com.acmerobotics.dashboard.config.Config;
//import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
//import com.arcrobotics.ftclib.controller.PIDController;
//import com.qualcomm.robotcore.eventloop.opmode.OpMode;
//import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
//import com.qualcomm.robotcore.hardware.DcMotorEx;
//
//@Config
//@TeleOp
//public class PIDF_Arm extends OpMode {
//
//    private PIDController controller;
//
//    public static double p = 0.0085, i = 0, d = 0.0001;
//    public static double f = 0.25;
//
//    public static int target = 0;
//
//    private final double ticks_in_degree = 700/180.0; // double check based on motor specs
//    private DcMotorEx armMotor;
//
//    public PIDF_Arm(DcMotorEx armMotor, MultipleTelemetry telemetry) {
//        this.controller = new PIDController(p, i, d);
//        this.armMotor = armMotor;
//        this.telemetry = telemetry;
//    }
//
//    public void setTarget(int newTarget) {
//        target = newTarget;
//    }
//
//    @Override
//    public void init(){
//
//        controller = new PIDController(p, i, d);
//        telemetry = new MultipleTelemetry(telemetry, FtcDashboard.getInstance().getTelemetry());
//        arm_motor = hardwareMap.get(DcMotorEx.class, "liftMotor");
//    }
//
//    @Override
//    public void loop(){
//        controller.setPID(p,i,d);
//        int armPos = arm_motor.getCurrentPosition();
//        double pid = controller.calculate(armPos, target);
//
//        double ff = Math.cos(Math.toRadians(target/ticks_in_degree)) * f;
//
//        double power = pid + ff;
//
//        arm_motor.setPower(power);
//
//        telemetry.addData("pos: ", armPos);
//        telemetry.addData("target pos: ", target);
//        telemetry.update();
//    }
//}

package org.firstinspires.ftc.teamcode;

import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
import com.arcrobotics.ftclib.controller.PIDController;
import com.qualcomm.robotcore.hardware.DcMotorEx;

@Config
public class PIDF_Arm {

    private PIDController controller;
    private DcMotorEx armMotor;
    private MultipleTelemetry telemetry;

    public static double p = 0.03, i = 0.01, d = 0.001;
    public static double f = 0.25;

    public static int target = 0;
    private final double ticksInDegree = 700 / 180.0;

    public PIDF_Arm(DcMotorEx armMotor, MultipleTelemetry telemetry) {
        this.controller = new PIDController(p, i, d);
        this.armMotor = armMotor;
        this.telemetry = telemetry;
    }

    public void setTarget(int newTarget) {
        target = newTarget;
    }

    public void update() {
        controller.setPID(p, i, d);
        int armPos = armMotor.getCurrentPosition();
        double pid = controller.calculate(armPos, target);
        double ff = Math.cos(Math.toRadians(target / ticksInDegree)) * f;
        double power = pid + ff;

        armMotor.setPower(power);

        telemetry.addData("Arm Position", armPos);
        telemetry.addData("Target Position", target);
        telemetry.update();
    }
}

