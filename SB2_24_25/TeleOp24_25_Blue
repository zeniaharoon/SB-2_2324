package org.firstinspires.ftc.teamcode;

import static java.lang.Math.abs;
import static java.lang.Math.max;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

@Config
@TeleOp(name = "TeleOp24_25_Blue", group = "Mecanum")
public class TeleOp24_25_Blue extends LinearOpMode {
    private DcMotor rightFront;
    private DcMotor leftFront;
    private DcMotor leftBack;
    private DcMotor rightBack;
    private ElapsedTime runtime = new ElapsedTime();
    private LinearLift2425 lift;
    private Servo clawOpen;

    private Servo rotateClaw;
    private double rotateClawPosition;
    public FtcDashboard ftcDashboard;

    private boolean debug = true;


    private DcMotor liftMotor1;
    private DcMotor liftMotor2;

    private DcMotorEx liftMotor;
    private PIDF_Arm pidfArm;

    //private DcMotor liftMotor4;

    @Override
    public void runOpMode() {

        this.ftcDashboard = FtcDashboard.getInstance();
        this.telemetry = new MultipleTelemetry(telemetry, FtcDashboard.getInstance().getTelemetry());


        telemetry.addData("Status", "Initializing...");
        telemetry.update();

        // Initialize drivetrain motors
        rightFront = hardwareMap.get(DcMotor.class, "frontRight");
        leftFront = hardwareMap.get(DcMotor.class, "frontLeft");
        leftBack = hardwareMap.get(DcMotor.class, "backLeft");
        rightBack = hardwareMap.get(DcMotor.class, "backRight");

        // Initialize attachments
        liftMotor1 = hardwareMap.get(DcMotor.class, "liftMotor1");
        liftMotor2 = hardwareMap.get(DcMotor.class, "liftMotor2");
        lift = new LinearLift2425(liftMotor1, liftMotor2, runtime, telemetry);

        clawOpen = hardwareMap.get(Servo.class, "clawOpen");

        rotateClaw = hardwareMap.get(Servo.class, "rotateClaw");

        //liftMotor4 = hardwareMap.get(DcMotor.class, "liftMotor4");
        //outake2425 = new FourBarOutake2425(liftMotor4, runtime, telemetry);
        liftMotor = hardwareMap.get(DcMotorEx.class, "liftMotor");
        pidfArm = new PIDF_Arm(liftMotor, new MultipleTelemetry(telemetry, FtcDashboard.getInstance().getTelemetry()));
        liftMotor.setDirection(DcMotorSimple.Direction.FORWARD);




        // Reset and configure encoders
        leftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        leftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Set directions for mecanum drive
        leftFront.setDirection(DcMotorSimple.Direction.FORWARD);
        rightFront.setDirection(DcMotorSimple.Direction.REVERSE);
        leftBack.setDirection(DcMotorSimple.Direction.FORWARD);
        rightBack.setDirection(DcMotorSimple.Direction.REVERSE);


        // HSV color scale and RelativeLayout for background color change
        final float hsvValues[] = {0F, 0F, 0F};
        final double SCALE_FACTOR = 255;
        int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);

        telemetry.addData("Status", "Initialized");
        telemetry.update();

        waitForStart();
        runtime.reset();

        pidfArm.setTarget(liftMotor.getCurrentPosition());
        pidfArm.update();
        //rotateClaw.setPosition(rotateClawPosition);

        while (opModeIsActive()) {
            // Read joystick values
            double y = gamepad1.left_stick_y;  // Forward/backward (inverted for forward)
            double x = -gamepad1.left_stick_x;   // Side-to-side (strafe)
            double r = -gamepad1.right_stick_x;  // Rotation

            // Calculate motor powers
            double p1 = y + x + r;  // Left Front
            double p2 = y - x - r;  // Right Front
            double p3 = y - x + r;  // Left Back
            double p4 = y + x - r;  // Right Back

            // Normalize motor powers if any exceed 1.0
            double maxval = max(abs(p1), max(abs(p2), max(abs(p3), abs(p4))));
            if (maxval > 1.0) {
                p1 /= maxval;
                p2 /= maxval;
                p3 /= maxval;
                p4 /= maxval;
            }

            // Set motor powers
            leftFront.setPower(p1);
            rightFront.setPower(p2);
            leftBack.setPower(p3);
            rightBack.setPower(p4);

            if (gamepad2.x) {
                lift.lowBasket();
            }





            // Map gamepad2 left stick Y-axis to lift motor target position
            double joystickValue = gamepad2.left_stick_y;
//            liftMotor4.setDirection(DcMotorSimple.Direction.FORWARD);
//            liftMotor4.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);





            if(gamepad2.a) {
                lift.highRung();
            }

            if(gamepad2.b) {
                lift.neutral();
            }


            if (gamepad2.dpad_down) {
                pidfArm.setTarget(100);
                // Example target position
            }
            if (gamepad2.dpad_up) {
                pidfArm.setTarget(200); // Another target position
            }

            // Update PID control for arm
            pidfArm.update();

            telemetry.addData("Arm Current Position", liftMotor.getCurrentPosition());
            telemetry.addData("Arm Target Position", PIDF_Arm.target);
            telemetry.update();


            //open
            if (gamepad2.left_bumper) {
                clawOpen.setPosition(0.9);
            }

            //close
            if (gamepad2.right_bumper) {
                clawOpen.setPosition(0.0);
            }

            double joystickInput = -gamepad2.left_stick_y; // Inverted because up is negative
            double increment = joystickInput * 0.01; // Scale the joystick input for finer control

            rotateClawPosition += increment; // Adjust the position
            rotateClawPosition = Math.max(0.0, Math.min(1.0, rotateClawPosition)); // Clamp to [0.0, 1.0]
            rotateClaw.setPosition(rotateClawPosition); // Set the servo position

            // Control linear slides with gamepad2 right stick Y-axis
            double slidePower = -gamepad2.right_stick_y; // Negative to match control direction
            liftMotor1.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            liftMotor2.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            liftMotor1.setPower(slidePower);
            liftMotor2.setPower(slidePower);



            // Push telemetry to the dashboard
            telemetry.update();


            relativeLayout.post(new Runnable() {
                public void run() {
                    relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, hsvValues));
                }
            });


        }

    }

}
