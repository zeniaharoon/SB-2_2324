package org.firstinspires.ftc.teamcode;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.config.Config;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.robotcore.external.Telemetry;

@Config
public class Lift {
    // PID coefficients (configurable via FTC Dashboard)



    public static double P = 0.07;
    public static double I = 0.005;
    public static double D = 0.0;
    public static double F = 0.0;

    private DcMotorEx liftMotor;
    private ElapsedTime runtime;
    private Telemetry telemetry;



    // Target position for the lift
    public double targetPosition = 30; // Desired encoder position

    // State variables
    private double cumulativeError = 0.0;
    private double previousError = 0.0;
    private double lastTime = 0.0;
    private int currentPosition;
    private double error;

    public double getCurrentPosition() {
        return currentPosition;
    }

    public double getTargetPosition() {
        return targetPosition;
    }

    public double getError() {
        return error;
    }

    public double getCumulativeError() {
        return cumulativeError;
    }

    public double getMotorPower() {
        return liftMotor.getPower();
    }

    private double[] timeArray = new double[100]; // Adjust size as needed
    private double[] errorArray = new double[100];
    private double[] motorPowerArray = new double[100];
    private int index = 0;

    public FtcDashboard ftcDashboard;

    public Lift(DcMotor liftMotor, ElapsedTime runtime, Telemetry telemetry) {
        this.liftMotor = (DcMotorEx) liftMotor; // Cast to DcMotorEx
        this.runtime = runtime;
        this.ftcDashboard = FtcDashboard.getInstance();
        this.telemetry = telemetry;

        // Motor setup
        liftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        liftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER); // Custom PID requires this mode
        liftMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        liftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        lastTime = runtime.seconds(); // Initialize the timer
    }

    public void testLift() {
        // Get current position and calculate error
        currentPosition = liftMotor.getCurrentPosition();
        error = targetPosition - currentPosition;

        // Calculate deltaTime
        double currentTime = runtime.seconds();
        double deltaTime = currentTime - lastTime;

        // Update cumulative error for integral term
        cumulativeError += error * deltaTime;

        // Derivative term: change in error over time
        double derivative = (error - previousError) / deltaTime;

        // Feedforward (F)
        double feedforward = F;

        // PID calculation
        double motorPower = (P * error) + (I * cumulativeError) + (D * derivative) + feedforward;

        // Limit power to the motor's acceptable range [-1, 1]
        motorPower = Math.max(-1, Math.min(1, motorPower));

        // Set motor power
        liftMotor.setPower(motorPower);

        if (index < timeArray.length) {
            timeArray[index] = currentTime; // Log the current time
            errorArray[index] = error; // Log the current error
            motorPowerArray[index] = motorPower; // Log the motor power
            index++;
        }

        // Update state variables
        previousError = error;
        lastTime = currentTime;

        telemetryUpdate();
    }

    private void telemetryUpdate() {
        telemetry.addData("Current Position", currentPosition);
        telemetry.addData("Target Position", targetPosition);
        telemetry.addData("Error", error);
        telemetry.addData("Cumulative Error", cumulativeError);
        telemetry.addData("Motor Power", liftMotor.getPower());

    }
}
